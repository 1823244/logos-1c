Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;

Перем Лог;
Перем Журнал;

//{ основные процедуры для юнит-тестирования xUnitFor1C

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	//НаборТестов.НачатьГруппу("Сценарный тест", Истина);
	//НаборТестов.Добавить("ПараметрическийТест", НаборТестов.ПараметрыТеста(5, 7), "Тест должен показать использование представления теста");
		//Тест = НаборТестов.Добавить("ПараметрическийТест2");
		//Тест.Параметры.Добавить(12);
	НаборТестов.Добавить("ТестДолжен_ЗаписатьИПрочитатьЛог");
	НаборТестов.Добавить("ТестДолжен_ЗаписатьИПрочитатьЛог_НастройкаВыводВЖР");
	НаборТестов.Добавить("ТестДолжен_ЗаписатьИПрочитатьДваЛога_НастройкаВыводВЖР");
КонецПроцедуры
//}

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	Лог = Неопределено;
	Журнал = "";
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьИПрочитатьЛог() Экспорт
	ВключитьОтладкуЛога(ИмяЛога());
	
	МенеджерЛогирования = Обработки.МенеджерЛогированияЛог.Создать();
	Лог = МенеджерЛогирования.ПолучитьЛог(ИмяЛога());
	
	Лог.УстановитьРаскладку(ЭтотОбъект);
	
	Лог.Информация("От <%1>", ИмяЛога());
	Лог.Отладка("От <%1>", ИмяЛога());
	
	Ожидаем.Что(Журнал).Равно(" ИНФОРМАЦИЯ-От <ТестЛог>; ИНФОРМАЦИЯ-От <ТестЛог>; ОТЛАДКА-От <ТестЛог>; ОТЛАДКА-От <ТестЛог>;");
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьИПрочитатьЛог_НастройкаВыводВЖР() Экспорт
	ВключитьОтладкуЛогаХранилища(ИмяЛога());
	
	МенеджерЛогирования = Обработки.МенеджерЛогированияЛог.Создать();
	Лог = МенеджерЛогирования.ПолучитьЛог(ИмяЛога());
	
	Лог.УстановитьРаскладку(ЭтотОбъект);
	
	Лог.Информация("От <%1>", ИмяЛога());
	Лог.Отладка("От <%1>", ИмяЛога());
	
	Ожидаем.Что(Журнал).Равно(" ИНФОРМАЦИЯ-От <ТестЛог>; ИНФОРМАЦИЯ-От <ТестЛог>; ОТЛАДКА-От <ТестЛог>; ОТЛАДКА-От <ТестЛог>;");
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьИПрочитатьДваЛога_НастройкаВыводВЖР() Экспорт
	ИмяЛога2 = ИмяЛога() + "_2";
	ВключитьОтладкуЛогаХранилища(ИмяЛога());
	ВключитьОтладкуЛогаХранилища(ИмяЛога2);
	
	МенеджерЛогирования = Обработки.МенеджерЛогированияЛог.Создать();
	Лог = МенеджерЛогирования.ПолучитьЛог(ИмяЛога());
	Лог2 = МенеджерЛогирования.ПолучитьЛог(ИмяЛога2);
	
	Лог.УстановитьРаскладку(ЭтотОбъект);
	Лог2.УстановитьРаскладку(ЭтотОбъект);
	
	Лог.Информация("От <%1>", ИмяЛога());
	Лог2.Отладка("От <%1>", ИмяЛога2);
	
	Ожидаем.Что(Журнал).Равно("");
КонецПроцедуры

Процедура ВключитьОтладкуЛога(ИмяЛога)
	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	НастройкиЛогирования.ЗаписатьВКонфигурацию(ИмяЛога, НастройкиЛогирования.УровниЛога.Отладка);
КонецПроцедуры

Процедура ВключитьОтладкуЛогаХранилища(ИмяЛога)

	ПараметрыВыводаВЛог = СтрШаблон("DEBUG, v8reg, console
	|appender.v8reg=ВыводЛогаВЖР
	|appender.v8reg.ИмяСобытия=%1
	|appender.v8reg.Уровень=Предупреждение
	|
	|appender.console=ВыводЛогаВКонсоль", "Событие1.Подвид1");

	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	НастройкиЛогирования.ЗаписатьВКонфигурацию(ИмяЛога, НастройкиЛогирования.УровниЛога.Отладка, ПараметрыВыводаВЛог);

КонецПроцедуры

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Результат =  СтрШаблон("%1-%2", Лог.НаименованиеУровня(Уровень), Сообщение);
	
	Журнал = СтрШаблон("%1 %2;", Журнал, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяЛога()
	Возврат "ТестЛог";
КонецФункции

//} 
